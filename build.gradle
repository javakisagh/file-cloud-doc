/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'mwypych' at '22.12.16 19:06' with Gradle 3.0
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

plugins {
	id 'com.github.jlouns.cpe' version '0.4.1'
//	id 'org.ajoberstar.grgit' version '1.5.0'
}

import java.nio2.*
//import org.ajoberstar.gradle.git.tasks.*

//ext.grgit = Grgit.open(currentDir: projectDir)
class AppendableDir {
    def dir
    AppendableDir(File fileDir) {
       dir = fileDir.toPath()
    }
    
    File with(String path) {
        return dir.resolve(path).toFile()
    }
}
def append(File dir) {
   return new AppendableDir(dir)
}

ext {
    //buildDir = 'build/'
    swaggerBaseDir = append buildDir with 'swagger/'
    swaggerUIDir = append swaggerBaseDir with 'swagger-ui'
    swaggerEditorDir = append swaggerBaseDir with 'swagger-editor'
    swaggerEditorZip = 'swagger-editor.zip'
}

task createBuildDir(type: CrossPlatformExec) {
    outputs.dir(buildDir)
    workingDir "."
    commandLine 'mkdir','-p',buildDir
}

task createSwaggerDir(type: CrossPlatformExec) {
    outputs.dir(swaggerBaseDir)
    workingDir "."
    commandLine 'mkdir','-p',swaggerBaseDir
}
	

task wgetSwaggerEditor(type: CrossPlatformExec) {
    def swaggerEditorZipPath = append buildDir with swaggerEditorZip
    outputs.file(swaggerEditorZipPath)
    
    workingDir buildDir
    //commandLine 'ls'
    commandLine 'wget', 'https://github.com/swagger-api/swagger-editor/releases/download/v2.10.4/swagger-editor.zip'
    
    dependsOn createBuildDir
}

task unzipSwaggerEditor(type: Copy) {
    def dest = swaggerBaseDir
    def artifact = append buildDir with swaggerEditorZip
    
    print artifact
    
    inputs.file(artifact)

    outputs.dir(swaggerEditorDir)
    
    inputs.each {print it}
    
    from zipTree(artifact)
    into dest 
    
    dependsOn wgetSwaggerEditor
    dependsOn createSwaggerDir
}

/*task cloneSwaggerUI(type: GitClone) {
    def destination = file("$buildDir/swagger/swagger-ui")
    uri = "https://github.com/swagger-api/swagger-ui.git"
    destinationPath = destination
    bare = false
    enabled = !destination.exists()
}*/

task cloneSwaggerUI(type: CrossPlatformExec) {
    def swaggerUI = 'swagger-ui/'
    inputs.file(createSwaggerDir)
    outputs.dir(swaggerUIDir)
    
    def uri = "https://github.com/swagger-api/swagger-ui.git"
    
    workingDir swaggerBaseDir
    commandLine 'git','clone',uri,swaggerUI
}

task replaceSwaggerUrl(type: CrossPlatformExec) {
     inputs.file(cloneSwaggerUI)
     
     workingDir swaggerUIDir
     def pattern = /http:\/\/petstore\.swagger\.io\/v2\/swagger\.json/
     def replacement = ''
     commandLine "sed", "-i", "s|$pattern|$replacement|g","dist/index.html"
}

task addSwaggerSpecContent(type: CrossPlatformExec) {
     inputs.file(cloneSwaggerUI)

     workingDir swaggerUIDir
     
     
     def pattern = /window\.swaggerUi = new SwaggerUi/
     def jsonSpecContent = "???"
     def replacement = "var spec = $jsonSpecContent;"
     commandLine  "sed", "-i", "/$pattern/i $replacement", "dist/index.html"

}

task addSwaggerSpec(type: CrossPlatformExec) {
     inputs.file(cloneSwaggerUI)
     
     workingDir swaggerUIDir
     
     def pattern = /window\.swaggerUi = new SwaggerUi/
     def jsonSpecContent = "???"
     def replacement = "spec = spec,"
     commandLine  "sed", "-i", "/$pattern/a $replacement", "dist/index.html"
//     commandLine  'sed', '/window\.swaggerUi = new SwaggerUi/a spec = spec,', "dist/index.html"
}



task runSwaggerUI(type: CrossPlatformExec) {
    inputs.file(cloneSwaggerUI)
    dependsOn cloneSwaggerUI
        
    dependsOn replaceSwaggerUrl
    dependsOn addSwaggerSpecContent
    dependsOn addSwaggerSpec
    
    workingDir swaggerUIDir
    
    def uri = append swaggerUIDir with 'dist/index.html' toURI()
    commandLine 'x-www-browser',uri

}

task p << {
   def pattern = /http:\/\/petstore\.swagger\.io\/v2\/swagger\.json/
   println pattern
}

task touchHello(type: CrossPlatformExec) {
    outputs.file("$buildDir")
    commandLine 'mkdir',"$buildDir"
}

task lsCommand(type: CrossPlatformExec) {
    inputs.file(touchHello)
    commandLine 'ls'
}

