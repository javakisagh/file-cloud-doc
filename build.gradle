/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'mwypych' at '22.12.16 19:06' with Gradle 3.0
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

plugins {
	id 'com.github.jlouns.cpe' version '0.4.1'
//	id 'org.ajoberstar.grgit' version '1.5.0'
}

import java.nio2.*
//import org.ajoberstar.gradle.git.tasks.*

//ext.grgit = Grgit.open(currentDir: projectDir)
class AppendableDir {
    def dir
    AppendableDir(File fileDir) {
       dir = fileDir.toPath()
    }
    
    File with(String path) {
        return dir.resolve(path).toFile()
    }
}
def append(File dir) {
   return new AppendableDir(dir)
}

ext {
    swaggerBaseDir = append buildDir with "swagger/"
    swaggerUIDir = append swaggerBaseDir with "swagger-ui"
    swaggerUIDistDir = append swaggerUIDir with "dist-build"
    swaggerEditorDir = append swaggerBaseDir with "swagger-editor"
    swaggerEditorZip = "swagger-editor.zip"
    swaggerJson = "swagger.json"
}

task createBuildDir(type: CrossPlatformExec) {
    outputs.dir(buildDir)
    workingDir "."
    commandLine 'mkdir','-p',buildDir
}

task createSwaggerDir(type: CrossPlatformExec) {
    outputs.dir(swaggerBaseDir)
    workingDir "."
    commandLine 'mkdir','-p',swaggerBaseDir
}
	

task wgetSwaggerEditor(type: CrossPlatformExec) {
    def swaggerEditorZipPath = append buildDir with swaggerEditorZip
    outputs.file(swaggerEditorZipPath)
    
    workingDir buildDir
 
    commandLine 'wget', 'https://github.com/swagger-api/swagger-editor/releases/download/v2.10.4/swagger-editor.zip'
    
    dependsOn createBuildDir
}

task unzipSwaggerEditor(type: Copy) {
    def dest = swaggerBaseDir
    def artifact = append buildDir with swaggerEditorZip
    
    print artifact
    
    inputs.file(artifact)

    outputs.dir(swaggerEditorDir)
    
    inputs.each {print it}
    
    from zipTree(artifact)
    into dest 
    
    dependsOn wgetSwaggerEditor
    dependsOn createSwaggerDir
}

task cloneSwaggerUI(type: CrossPlatformExec) {
    def swaggerUI = 'swagger-ui/'
    inputs.file(createSwaggerDir)
   // outputs.dir(swaggerUIDir)
    outputs.upToDateWhen { true }
        //swaggerUIDir.exists() && swaggerUIDir.list().length > 0
    
    def uri = "https://github.com/swagger-api/swagger-ui.git"
    
    workingDir swaggerBaseDir
    commandLine 'git','clone',uri,swaggerUI
}

task swaggerUIcopyDist(type: Copy) {

     def wokringDir = append swaggerUIDir with "dist"
     def indexHtml = append wokringDir with "index.html"
     def destDir = append swaggerUIDir with "dist-build"
     
     inputs.file cloneSwaggerUI
     outputs.dir destDir
     //outputs.upToDateWhen { false }
     
     from (wokringDir) { 
         include "**/*"
     }
     into destDir
     
     exclude 'index.html'
}

task swaggerUIcreateIndexHtmlCopy(type: Copy) {

     def workingFile = append swaggerUIDir with "dist/index.html"
     def destDir = append swaggerUIDir with "dist-build"
     def destFile = append destDir with "index.html"
     
     inputs.file cloneSwaggerUI
     outputs.file destFile
     
     
     def urlPattern = /http:\/\/petstore\.swagger\.io\/v2\/swagger\.json/
     def urlReplacement = ''
     
     def newLine = System.getProperty("line.separator")
     
     
     from workingFile
     into destDir
     
     filter {
         it.replaceAll(urlPattern,urlReplacement)
     }
     
     def windowPattern = "window.swaggerUi = new SwaggerUi({"
     def windowAppend = "        spec: spec,"
     filter {
     	 if (it.trim().startsWith(windowPattern)) {
     	     it+newLine+windowAppend
     	 } else 
     	     it
     }
     
     def jsonSpecContent = file(swaggerJson).text
     def jsonPrepend = "      var spec = $jsonSpecContent;" 
     
     filter {
     	 if (it.trim().startsWith(windowPattern)) {
     	     jsonPrepend+newLine+it
     	 } else 
     	     it
     }
}

/*task addSwaggerSpecContent(type: CrossPlatformExec) {
     inputs.file(cloneSwaggerUI)

     workingDir swaggerUIDir
     
     
     def pattern = /window\.swaggerUi = new SwaggerUi/
     def jsonSpecContent = "???"
     def replacement = "var spec = $jsonSpecContent;"
     commandLine  "sed", "-i", "/$pattern/i $replacement", "dist/index.html"

}

task addSwaggerSpec(type: CrossPlatformExec) {
     inputs.file(cloneSwaggerUI)
     
     workingDir swaggerUIDir
     
     def pattern = /window\.swaggerUi = new SwaggerUi/
     def jsonSpecContent = "???"
     def replacement = "spec = spec,"
     commandLine  "sed", "-i", "/$pattern/a $replacement", "dist/index.html"
//     commandLine  'sed', '/window\.swaggerUi = new SwaggerUi/a spec = spec,', "dist/index.html"
}*/



task runSwaggerUI(type: CrossPlatformExec) {
    inputs.file(cloneSwaggerUI)
    outputs.upToDateWhen { false }
    dependsOn cloneSwaggerUI
        
    dependsOn swaggerUIcopyDist
    dependsOn swaggerUIcreateIndexHtmlCopy
    
    workingDir swaggerUIDistDir
    
    def uri = append swaggerUIDistDir with 'index.html' toURI()
    commandLine 'xdg-open',uri
}

task clean(type: CrossPlatformExec) {
    workingDir buildDir
    
    commandLine 'rm','-rf',buildDir
}

task p << {
   def pattern = /http:\/\/petstore\.swagger\.io\/v2\/swagger\.json/
   println pattern
}

task touchHello(type: CrossPlatformExec) {
    outputs.file("$buildDir")
    commandLine 'mkdir',"$buildDir"
}

task lsCommand(type: CrossPlatformExec) {
    inputs.file(touchHello)
    commandLine 'ls'
}

